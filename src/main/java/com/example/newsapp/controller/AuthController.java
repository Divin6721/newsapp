package com.example.newsapp.controller;

import com.example.newsapp.dto.*;
import com.example.newsapp.mapper.RegisterRequestMapper;
import com.example.newsapp.mapper.UserMapper;
import com.example.newsapp.model.User;
import com.example.newsapp.repository.UserRepository;
import com.example.newsapp.security.JwtUtil;
import com.example.newsapp.service.PermissionService;
import com.example.newsapp.service.RefreshTokenService;
import io.jsonwebtoken.ExpiredJwtException;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.security.authentication.AuthenticationManager;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.bind.annotation.*;

@Slf4j
@RestController
@RequestMapping("/api")
@RequiredArgsConstructor
public class AuthController {

    private final AuthenticationManager authenticationManager;//–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ö–∞–Ω–∏–∑–º Spring Security –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–æ–≥–∏–Ω–∞ –∏ –ø–∞—Ä–æ–ª—è
    private final JwtUtil jwtUtil;//–ö–ª–∞—Å—Å, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–∑–¥–∞—ë—Ç –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç JWT-—Ç–æ–∫–µ–Ω—ã
    private final UserDetailsService userDetailsService;//	–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Spring ‚Äî –∑–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email (username)
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;
    private final PermissionService permissionService;
    private final RefreshTokenService refreshTokenService;


    @Operation(summary = "–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É (–ª–æ–≥–∏–Ω)")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "–£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è"),
            @ApiResponse(responseCode = "401",
                    description = "–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = ProblemDetails.class)
                    ))
    })
    @PostMapping("/login")
    public ResponseEntity<?> login(@Valid @RequestBody LoginRequest loginRequest) {
        try {
            Authentication authentication = authenticationManager.authenticate(
                    new UsernamePasswordAuthenticationToken(
                            loginRequest.getEmail(),
                            loginRequest.getPassword()));

            User user = permissionService.getUserForAuthentication(loginRequest.getEmail());
            String accessToken = jwtUtil.generateAccessToken(user);
            String refreshToken = jwtUtil.generateRefreshToken(user);

            log.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {} –≤–æ—à—ë–ª –≤ —Å–∏—Å—Ç–µ–º—É", loginRequest.getEmail());

            return ResponseEntity.ok(new JwtResponse(accessToken, refreshToken));
        } catch (Exception e) {
            log.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {}: {}", loginRequest.getEmail(), e.getMessage());

            ProblemDetails error = ProblemDetails.builder()
                    .status(401)
                    .title("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
                    .detail(e.getMessage())
                    .instance("/api/login")
                    .type("auth_error")
                    .build();

            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(error);
        }
    }

    @Operation(summary = "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"),
            @ApiResponse(
                    responseCode = "400",
                    description = "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –∏–ª–∏ –¥—É–±–ª–∏–∫–∞—Ç",
                    content = @Content(
                            mediaType = "application/json",
                            schema = @Schema(implementation = ProblemDetails.class)
                    ))
})
    @PostMapping("/register")
    @Transactional
    public ResponseEntity<UserDto> register(@Valid @RequestBody RegisterRequest request) {
        permissionService.checkUniqueUserEmail(request.getEmail());
        permissionService.checkUniqueUserName(request.getName());

        User user = RegisterRequestMapper.fromRegisterRequest(request, passwordEncoder);
        user = userRepository.save(user);

        return ResponseEntity.status(HttpStatus.CREATED)
                .body(UserMapper.toUserDto(user));
    }




    @PostMapping("/refresh")
    public ResponseEntity<JwtResponse> refresh(@RequestBody TokenRequest request) {
        String refreshToken = request.getRefreshToken();

        if (refreshTokenService.isRevoked(refreshToken)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
        }

        try {
            String email = jwtUtil.extractUsername(refreshToken);
            refreshTokenService.revokeToken(refreshToken); // ‚úÖ —Ä–æ—Ç–∞—Ü–∏—è

            User user = permissionService.getUserForAuthentication(email); // üí° –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            String newAccessToken = jwtUtil.generateAccessToken(user);
            String newRefreshToken = jwtUtil.generateRefreshToken(user);

            return ResponseEntity.ok(new JwtResponse(newAccessToken, newRefreshToken));
        } catch (ExpiredJwtException e) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).body(null);
        }
    }

}


